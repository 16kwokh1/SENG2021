# Relevant python libraries are imported
import datetime
import json
import os

# This list subclass contains methods to save and load object-elements as JSON
class List_plus(list):

    # To initialise it, a class name from below must be used as the argument
    def __init__(self, Class, file_rel_path):

        self.Class = Class
        self.file_rel_path = file_rel_path

    # Appends an object to the list, given a dictionary of JSON data
    def append_json(self, json):

        obj = self.Class()
        obj.set_json(json)
        self.append(obj)

    # Returns a JSON-able, print-able list containing the data of each element
    def get_list_json(self):

        list_json = []

        for element in self:
            list_json.append(element.get_json())

        return list_json

    # Populates the list, given a relative path to a JSON file
    def load(self):

        curr_dir = os.path.dirname(__file__)

        try:
            abs_path = os.path.join(curr_dir, self.file_rel_path)
            with open(abs_path, 'r', encoding = 'utf-8') as FILE:
                list_json = json.load(FILE)
                for elem_json in list_json:
                    self.append_json(elem_json)
        # If the file does not exist, leave the list as it is
        except FileNotFoundError:
            pass

    # Saves the JSON data of the elements to a JSON file in a given directory
    # Note: the file may not exist yet, but the directories MUST already exist
    def save(self):

        curr_dir = os.path.dirname(__file__)
        abs_path = os.path.join(curr_dir, self.file_rel_path)

        with open(abs_path, 'w+', encoding = 'utf-8') as FILE:
            list_json = self.get_list_json()
            json.dump(list_json, FILE, ensure_ascii = False, indent = 4)

    # Deletes the appropriate JSON file
    def delete_file(self):

        curr_dir = os.path.dirname(__file__)
        abs_path = os.path.join(curr_dir, self.file_rel_path)
        try:
            os.remove(abs_path)
        except:
            pass

# This class is used for users (authentication and profiles)
class User:

    # The class is initiated to contain a dictionary with only JSON-able data
    # The structure of this dictionary may change
    # No format or type checking occurs in __init__
    # Comments regarding the types of strings are just a guide
    # The argument names will not change, even if the dictionary keys change
    # Sometimes, data, such as time, is converted to a different format
    def __init__(self,
                 u_id = None,
                 email = None,
                 name_first = None,
                 name_last = None,
                 salt = None,
                 hashed_password = None,
                 user_perms = None,
                 handle = None,
                 wishlish = None,
                 reset_code = None,
                 reset_attempts = 0,
                 reset_time = (datetime.datetime.now() -
                               datetime.timedelta(hours = 24))
                ):

        #  dict
        self.json = {}
        # int
        self.json['u_id'] = u_id
        # str (email)
        self.json['email'] = email
        # str (1 to 50 characters)
        self.json['name_first'] = name_first
        # str (1 to 50 characters)
        self.json['name_last'] = name_last
        # str (16 random characters)
        self.json['salt'] = salt
        # str
        self.json['hashed_password'] = hashed_password
        # int (1 to 3)
        self.json['user_perms'] = user_perms
        # str (3 to 20 characters)
        self.json['handle'] = handle
        # str (8 alphanumeric characters)
        self.json['reset_code'] = reset_code
        # int
        self.json['reset_attempts'] = reset_attempts
        # int (Unix timestamp)
        self.json['reset_time'] = datetime.datetime.timestamp(reset_time)

    # This function returns the JSON dictionary of data belonging to the object
    def get_json(self):

        return self.json

    # This function updates the data using information from a JSON dictionary
    # Note: only ever use this function if the JSON file was generated by this
    # python file and only if no modifications were made to the python or JSON
    def set_json(self, json):

        self.json.update(json)

    # The following functions read data from the JSON dictionary
    # These function names will not change, even if the dictionary keys change
    def get_u_id(self):

        return self.json['u_id']

    def get_email(self):

        return self.json['email']

    def get_name_first(self):

        return self.json['name_first']

    def get_name_last(self):

        return self.json['name_last']

    def get_salt(self):

        return self.json['salt']

    def get_hashed_password(self):

        return self.json['hashed_password']

    def get_user_perms(self):

        return self.json['user_perms']

    def get_handle(self):

        return self.json['handle']


    def get_reset_code(self):

        return self.json['reset_code']

    def get_reset_attempts(self):

        return self.json['reset_attempts']

    def get_reset_time(self):

        return datetime.datetime.fromtimestamp(self.json['reset_time'])

    # The following functions write data into the JSON dictionary
    # These function names will not change, even if the dictionary keys change
    # No format nor type checking occurs on the argument(s)
    def set_u_id(self, value):

        self.json['u_id'] = value

    def set_email(self, value):

        self.json['email'] = value

    def set_name_first(self, value):

        self.json['name_first'] = value

    def set_name_last(self, value):

        self.json['name_last'] = value

    def set_salt(self, value):

        self.json['salt'] = value

    def set_hashed_password(self, value):

        self.json['hashed_password'] = value

    def set_user_perms(self, value):

        self.json['user_perms'] = value

    def set_handle(self, value):

        self.json['handle'] = value

    def set_reset_code(self, value):

        self.json['reset_code'] = value

    def set_reset_attempts(self, value):

        self.json['reset_attempts'] = value

    def set_reset_time(self, value):

        self.json['reset_time'] = datetime.datetime.timestamp(value)

# This class is used for reset_codes (reset code and u_ids)
# Comments regarding the User class similarly apply here
class ResetCode:

    def __init__(self, reset_u_id = None, reset_code = None):

        # dict
        self.json = {}
        # int
        self.json['reset_u_id'] = reset_u_id
        # string
        self.json['reset_code'] = reset_code

    # Get JSON
    def get_json(self):
        return self.json

    # Update JSON
    def set_json(self, json):
        self.json.update(json)

    # Get functions
    def get_reset_u_id(self):

        return self.json['reset_u_id']

    def get_reset_code(self):

        return self.json['reset_code']

    # Set functions
    def set_reset_u_id(self, value):

        self.json['reset_u_id'] = value

    def set_reset_code(self, value):

        self.json['reset_code'] = value